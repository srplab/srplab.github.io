I"À><h3 id="this-example-shows-how-to-write-go-lang-multi-threading-extension-for-other-scripts-based-on-starcore_for_go">This example shows how to write go lang multi-threading extension for other scripts based on starcore_for_go.</h3>

<h1 align="left"><font color="#FF9900">Background</font></h1>

<p>This example shows how to write go lang multi-threading extension for other scripts based on starcore_for_go.</p>

<h3 id="1-install">1. Install</h3>

<ul>
  <li>
    <p>For windows, python and <a href="https://github.com/srplab/starcore_for_windows">cle for win32</a> must be installed.</p>
  </li>
  <li>
    <p>For linux, python and <a href="https://github.com/srplab/starcore_for_linux">cle for linux</a> must be installed.</p>
  </li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/srplab/starcore_for_go/stargo
</code></pre></div></div>

<h3 id="2-access-cle-objects-in-threads">2. Access cle objects in threads.</h3>

<p>After cle is initialized, the global lock is locked. The function or method that the thread calls the cle object needs to be locked first with stargo.SRPLock. After the end of the call, unlock with stargo.SRPUnLock. The caller needs to call stargo.SRPDispatch or SRPUnLock to allow the go thread to run.</p>

<h3 id="3-create-go-extension">3. Create go extension.</h3>

<p>Create go source file main.go, define ‚Äúinit‚Äù function.
  Register CallBack function ‚ÄúRegScriptInitCallBack_P‚Äù, in this callback function, create cle object and define it‚Äôs function</p>

<p>The code is relatively simple and does not require much explanation</p>

<figure class="highlight" style="color:gray;"><pre><code class="language-go" data-lang="go"><span class="c">// main</span>
<span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
	<span class="s">"time"</span>

	<span class="s">"github.com/srplab/starcore_for_go/stargo"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">print_time</span><span class="p">(</span><span class="n">LuaObj</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarObject</span><span class="p">,</span> <span class="n">threadName</span> <span class="kt">string</span><span class="p">,</span> <span class="n">delay</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">count</span> <span class="kt">int</span>
	<span class="n">count</span> <span class="o">=</span> <span class="m">0</span>
	<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">threadName</span><span class="p">)</span>
	<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="m">100000</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>
		<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
		<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">threadName</span><span class="p">)</span>
		<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span>
		<span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="m">1</span>
		<span class="n">stargo</span><span class="o">.</span><span class="n">SRPLock</span><span class="p">()</span>
		<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">LuaObj</span><span class="p">)</span>
		<span class="n">LuaObj</span><span class="o">.</span><span class="n">Call</span><span class="p">(</span><span class="s">"Print"</span><span class="p">)</span>
		<span class="n">stargo</span><span class="o">.</span><span class="n">SRPUnLock</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">stargo</span><span class="o">.</span><span class="n">RegScriptTermCallBack_P</span><span class="p">(</span><span class="k">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"go script engine exit..."</span><span class="p">)</span>
	<span class="p">})</span>

	<span class="n">stargo</span><span class="o">.</span><span class="n">RegScriptInitCallBack_P</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">SrvGroup</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarSrvGroup</span><span class="p">,</span> <span class="n">Service</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarService</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"go script engine init..."</span><span class="p">)</span>

		<span class="c">/*--testgo can be called from other script */</span>
		<span class="n">s</span> <span class="o">:=</span> <span class="n">Service</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"testgo"</span><span class="p">)</span>
		<span class="n">s</span><span class="o">.</span><span class="n">RegScriptProc_P</span><span class="p">(</span><span class="s">"tt"</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">CleGroup</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarSrvGroup</span><span class="p">,</span> <span class="n">CleService</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarService</span><span class="p">,</span> <span class="n">CleObject</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarObject</span><span class="p">,</span> <span class="n">Paras</span> <span class="p">[]</span><span class="k">interface</span><span class="p">{})</span> <span class="k">interface</span><span class="p">{}</span> <span class="p">{</span>
			<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">Paras</span><span class="p">)</span>
			<span class="n">LuaObj</span> <span class="o">:=</span> <span class="n">CleService</span><span class="o">.</span><span class="n">GetObject</span><span class="p">(</span><span class="s">"LuaObj"</span><span class="p">)</span>
			<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">LuaObj</span><span class="p">)</span>
			<span class="k">go</span> <span class="n">print_time</span><span class="p">(</span><span class="n">LuaObj</span><span class="p">,</span> <span class="s">"Thread-1"</span><span class="p">,</span> <span class="m">1.0</span><span class="p">)</span>
			<span class="k">go</span> <span class="n">print_time</span><span class="p">(</span><span class="n">LuaObj</span><span class="p">,</span> <span class="s">"Thread-2"</span><span class="p">,</span> <span class="m">2.0</span><span class="p">)</span>

			<span class="k">return</span> <span class="p">[]</span><span class="k">interface</span><span class="p">{}{</span><span class="m">666</span><span class="p">,</span> <span class="m">777</span><span class="p">}</span>
		<span class="p">})</span>
		<span class="n">s</span><span class="o">.</span><span class="n">RegScriptProc_P</span><span class="p">(</span><span class="s">"tt1"</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">CleGroup</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarSrvGroup</span><span class="p">,</span> <span class="n">CleService</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarService</span><span class="p">,</span> <span class="n">CleObject</span> <span class="o">*</span><span class="n">stargo</span><span class="o">.</span><span class="n">StarObject</span><span class="p">,</span> <span class="n">Paras</span> <span class="p">[]</span><span class="k">interface</span><span class="p">{})</span> <span class="k">interface</span><span class="p">{}</span> <span class="p">{</span>
			<span class="n">stargo</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">Paras</span><span class="p">)</span>
			<span class="k">return</span> <span class="p">[]</span><span class="k">interface</span><span class="p">{}{</span><span class="m">666</span><span class="p">,</span> <span class="m">777</span><span class="p">}</span>
		<span class="p">})</span>
	<span class="p">})</span>
<span class="p">}</span>
  </code></pre></figure>

<h3 id="4-build-and-use-the-extension-in-lua-app">4. Build and use the extension in lua app.</h3>

<ul>
  <li>Build</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go build <span class="nt">-buildmode</span><span class="o">=</span>c-shared <span class="nt">-o</span> testgo.dll
</code></pre></div></div>

<ul>
  <li>lua app</li>
</ul>

<figure class="highlight" style="color:gray;"><pre><code class="language-lua" data-lang="lua"><span class="n">Service</span><span class="o">=</span><span class="n">libstarcore</span><span class="p">.</span><span class="n">_InitSimple</span><span class="p">(</span><span class="s2">"test"</span><span class="p">,</span><span class="s2">"123"</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="kc">nil</span><span class="p">);</span>
<span class="n">SrvGroup</span> <span class="o">=</span> <span class="n">Service</span><span class="p">.</span><span class="n">_ServiceGroup</span><span class="p">;</span>
<span class="n">Service</span><span class="p">:</span><span class="n">_CheckPassword</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">Service</span><span class="p">:</span><span class="n">_DoFile</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="s2">"./testgo.dll"</span><span class="p">,</span><span class="s2">""</span><span class="p">);</span>
<span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>

<span class="n">LuaObj</span> <span class="o">=</span> <span class="n">Service</span><span class="p">:</span><span class="n">_New</span><span class="p">(</span><span class="s2">"LuaObj"</span><span class="p">)</span>
<span class="n">Python</span> <span class="o">=</span> <span class="n">Service</span><span class="p">.</span><span class="n">testgo</span>
<span class="nb">print</span><span class="p">(</span><span class="n">Python</span><span class="p">)</span>

<span class="k">function</span> <span class="nf">LuaObj</span><span class="p">:</span><span class="n">Print</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"hello from lua"</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">Python</span><span class="p">)</span>
    <span class="n">libstarcore</span><span class="p">.</span><span class="n">_SRPUnLock</span><span class="p">()</span>
    <span class="n">libstarcore</span><span class="p">.</span><span class="n">_SRPLock</span><span class="p">()</span>    
<span class="k">end</span>    

<span class="n">Python</span><span class="p">:</span><span class="n">tt</span><span class="p">(</span><span class="mi">222</span><span class="p">,</span><span class="mi">333</span><span class="p">)</span>

<span class="k">function</span> <span class="nf">aa</span><span class="p">()</span>
  <span class="c1">-- libstarcore._SRPUnLock()</span>
  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">while</span><span class="p">(</span> <span class="kc">true</span> <span class="p">)</span> <span class="k">do</span>
      <span class="n">libstarcore</span><span class="p">.</span><span class="n">_SRPDispatch</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">then</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">"----------------------------------------"</span><span class="p">)</span>
          <span class="n">Python</span><span class="p">:</span><span class="n">tt1</span><span class="p">(</span><span class="s2">"123"</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>
          <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
          <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="k">end</span>
      <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="k">end</span>  
<span class="k">end</span>

<span class="n">aa</span><span class="p">()</span>


<span class="n">libstarcore</span><span class="p">.</span><span class="n">_SRPUnLock</span><span class="p">()</span>

<span class="k">while</span><span class="p">(</span> <span class="kc">true</span> <span class="p">)</span> <span class="k">do</span>
  
<span class="k">end</span>


<span class="n">SrvGroup</span><span class="p">:</span><span class="n">_ClearService</span><span class="p">()</span>
<span class="n">libstarcore</span><span class="p">.</span><span class="n">_ModuleExit</span><span class="p">()</span>
  </code></pre></figure>

<ul>
  <li>Run</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"C:</span><span class="se">\P</span><span class="s2">rogram Files</span><span class="se">\s</span><span class="s2">rplab</span><span class="se">\s</span><span class="s2">tarcore</span><span class="se">\s</span><span class="s2">tarapp"</span> <span class="nt">--print</span> <span class="nt">-e</span> call_go.lua
</code></pre></div></div>

<h1 align="left"><font color="#FF9900">Sample Download</font></h1>

<p><a href="/datas/writting_golang_multithreading_extension_for_other_scripts.zip" title="writting_golang_multithreading_extension_for_other_scripts">writting_golang_multithreading_extension_for_other_scripts.zip</a></p>

:ET